def parse_fasta(fasta_string): #adapted from previous function that considered multiple entries
    s_DNA="" #initialize empty string to store sequence
    for line in fasta_string.strip().splitlines(): #strip() removes whitespace from the edges of the string, splitlines() splits the strings into lines (iterable)
        if line.startswith(">"): 
            pass 
        else:
            s_DNA += line.strip()  #adds each sequence line directly next to the previous one
    return s_DNA

def rev_comp(s_DNA):
    dna_comp = s_DNA.replace("A", "X").replace("T","A").replace("X","T").replace("C","Y").replace("G","C").replace("Y","G")
    reversed_DNA = dna_comp[::-1]
    return(reversed_DNA)

def find_restriction_sites(s_DNA):
    n = len(s_DNA)
    results = set() 

    for i in range(n):
        for j in range(i + 4, min(i + 13, n + 1)):
            s_DNA_seg=s_DNA[i:j]
            if s_DNA_seg == rev_comp(s_DNA_seg):
                pos=i+1
                length = j-i #could be len(s_DNA_seg)
                results.add((pos, length))
    return(results)    

#running
with open(r'C:/Users/Gabriela Karam/Downloads/rosalind_revp.txt', 'r') as file:
    fasta_string = file.read()

s_DNA=parse_fasta(fasta_string)
resultss=find_restriction_sites(s_DNA)

for pos, length in sorted(results):  # Sets can be sorted too
    print(f"{pos} {length}")
